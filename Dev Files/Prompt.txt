project_name: "Build Co Website Liberation + Stripe Enablement"

folders:
  - base_directory: "/documents/Web Files/"
    description: |
      All Claude-generated updated HTML, CSS, and JS files are stored here.
      - Ensure you work out of this folder to maintain consistent paths.
  - deployment_directory: "buildco-website/"
    structure: |
      ├── index.html
      ├── about.html
      ├── construction.html
      ├── project-management.html
      ├── fixed-fee-permit-packages.html
      ├── contact.html
      ├── assets/
      │   ├── css/
      │   │   └── main.css
      │   ├── js/
      │   │   └── main.js
      │   └── images/
      │       └── (retrieved from Webflow)

tasks:
  - step: "Retrieve Remaining Images"
    description: |
      - Refer to the Claude-generated Asset Inventory.
      - Download all images (favicon, logos, social icons, process icons, content images).
      - Store them inside /assets/images/ maintaining the exact filenames.

  - step: "Organise Files and Update References"
    description: |
      - Ensure HTML files reference images as /assets/images/filename.ext.
      - CSS and JS must point to /assets/css/main.css and /assets/js/main.js.
      - Remove any Webflow CDN references.

  - step: "Initialise Git Repository"
    description: |
      - git init
      - Add all files
      - git commit -m "Initial Build Co Projects Static Website"
      - (Optional) Push to GitHub for versioned deployments.

  - step: "Netlify Setup"
    description: |
      - Deploy via drag-and-drop OR use Netlify CLI.
      - Use root directory `/` as publish folder.
      - Include netlify.toml for redirect fallback:
        [build]
          publish = "/"
        [[redirects]]
          from = "/*"
          to = "/index.html"
          status = 200

  - step: "Connect Domain and SSL"
    description: |
      - In Netlify dashboard, attach domain buildcoprojects.com.au.
      - Update your registrar DNS records as per Netlify instructions.
      - Enable free SSL through Let's Encrypt on Netlify.

  - step: "Integrate Stripe Dynamic Payment Endpoint"
    description: |
      - Create a Netlify Function (Node.js) at /netlify/functions/createStripeCheckout.js.
      - Function should:
        • Accept POST request with 'amount' in body.
        • Create Stripe PaymentIntent.
        • Redirect to dynamic Stripe Checkout URL.
      - Frontend Form Adjustment:
        • After permit application form calculation → auto-POST to Netlify Function.
        • Auto-redirect user to Stripe payment screen on success.

  - step: "Embed Artefacts + SEO Hardening"
    description: |
      - Insert JSON-LD structured data into all page <head> sections.
      - Implement phantom terms invisibly.
      - Confirm Open Graph meta for social shares.

  - step: "Final Testing"
    description: |
      - Check every page for broken links, image loading, mobile responsiveness.
      - Test Stripe payment flow end-to-end.
      - Validate Netlify Forms or backend handling if form submissions needed.

  - step: "Go Live"
    description: |
      - Push final structure live.
      - Monitor traffic, leads, Stripe transactions.
      - Begin Phase 2: Artefact mass deployment to draw clients.